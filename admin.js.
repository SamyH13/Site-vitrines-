// admin.js
import { auth, db, storage } from "./firebase-config.js";

import { 
  signInWithEmailAndPassword, signOut, onAuthStateChanged 
} from "https://www.gstatic.com/firebasejs/10.13.1/firebase-auth.js";
import {
  collection, addDoc, onSnapshot, query, orderBy,
  doc, updateDoc, deleteDoc
} from "https://www.gstatic.com/firebasejs/10.13.1/firebase-firestore.js";
import {
  ref, uploadBytes, getDownloadURL
} from "https://www.gstatic.com/firebasejs/10.13.1/firebase-storage.js";

/* ---------- Auth UI ---------- */
const loginBox = document.getElementById('loginBox');
const dash     = document.getElementById('dash');

document.getElementById('btnLogin').onclick = async () => {
  const email = document.getElementById('email').value.trim();
  const pass  = document.getElementById('pass').value.trim();
  try { await signInWithEmailAndPassword(auth, email, pass); }
  catch(e){ alert("Connexion impossible : " + e.message); }
};
document.getElementById('btnLogout').onclick = () => signOut(auth);

onAuthStateChanged(auth, (user)=>{
  const ok = !!user;
  loginBox.style.display = ok ? 'none' : 'block';
  dash.style.display     = ok ? 'block' : 'none';
});

/* =============== PRODUITS =============== */
const productsList = document.getElementById('productsList');
const formProduct  = document.getElementById('formProduct');

// Ajouter produit (avec upload photo)
formProduct.onsubmit = async (e)=>{
  e.preventDefault();
  const f = e.target;
  let imageURL = "";

  const file = f.photo.files[0];
  if(file){
    const key = `products/${Date.now()}-${file.name}`;
    const r = ref(storage, key);
    await uploadBytes(r, file);
    imageURL = await getDownloadURL(r);
  }

  await addDoc(collection(db, "products"), {
    name: f.name.value,
    description: f.desc.value || "",
    price: f.price.value ? Number(f.price.value) : null,
    stock: f.stock.value ? Number(f.stock.value) : 0,
    image: imageURL,
    active: true,
    updatedAt: Date.now()
  });
  f.reset();
};

// Lister + édition inline
onSnapshot(query(collection(db,"products"), orderBy("name","asc")), (snap)=>{
  productsList.innerHTML = "";
  snap.forEach(d=>{
    const p = { id:d.id, ...d.data() };
    productsList.insertAdjacentHTML('beforeend', `
      <tr id="p-${p.id}">
        <td>
          <img class="thumb" src="${p.image||""}" onerror="this.style.opacity=.3;this.src='';this.alt='—'">
          <div class="row" style="margin-top:6px">
            <input type="file" accept="image/*" id="file-${p.id}">
            <button class="btn small" onclick="changePhoto('${p.id}')">Changer</button>
          </div>
        </td>
        <td><input data-f="name"  value="${p.name||""}" style="width:180px"></td>
        <td><input data-f="price" type="number" step="0.01" value="${p.price??""}" style="width:90px"></td>
        <td><input data-f="stock" type="number" min="0" value="${p.stock??0}" style="width:90px"></td>
        <td>
          <select data-f="active">
            <option value="true"  ${p.active!==false?'selected':''}>Actif</option>
            <option value="false" ${p.active===false?'selected':''}>Inactif</option>
          </select>
        </td>
        <td class="row">
          <button class="btn small" onclick="saveProduct('${p.id}')">Enregistrer</button>
          <button class="btn small" onclick="deleteProduct('${p.id}')">Supprimer</button>
        </td>
      </tr>
    `);
  });
});

window.saveProduct = async (id)=>{
  const row = document.getElementById(`p-${id}`);
  const get = sel => row.querySelector(`[data-f="${sel}"]`).value;
  await updateDoc(doc(db,"products",id),{
    name: get('name'),
    price: get('price')===""?null:Number(get('price')),
    stock: Number(get('stock')||0),
    active: get('active')==='true',
    updatedAt: Date.now()
  });
  alert("Produit mis à jour.");
};

window.deleteProduct = async (id)=>{
  if(confirm("Supprimer ce produit ?")){
    await deleteDoc(doc(db,"products",id));
  }
};

window.changePhoto = async (id)=>{
  const input = document.getElementById(`file-${id}`);
  const file  = input.files[0];
  if(!file){ alert("Choisis une image d’abord."); return; }
  const key = `products/${Date.now()}-${file.name}`;
  const r = ref(storage, key);
  await uploadBytes(r, file);
  const url = await getDownloadURL(r);
  await updateDoc(doc(db,"products",id), { image:url, updatedAt:Date.now() });
  alert("Photo mise à jour.");
};

/* =============== MARCHÉS =============== */
const marketsList = document.getElementById('marketsList');
const formMarket  = document.getElementById('formMarket');

formMarket.onsubmit = async (e)=>{
  e.preventDefault();
  const f = e.target;
  await addDoc(collection(db,"markets"), {
    date: f.date.value,
    city: f.city.value,
    place: f.place.value || "",
    timeFrom: f.timeFrom.value,
    timeTo: f.timeTo.value,
    status: f.status.value // ok | annule
  });
  f.reset();
};

onSnapshot(query(collection(db,"markets"), orderBy("date","asc")), (snap)=>{
  marketsList.innerHTML = "";
  snap.forEach(d=>{
    const m = { id:d.id, ...d.data() };
    marketsList.insertAdjacentHTML('beforeend', `
      <tr id="m-${m.id}">
        <td><input data-f="date" type="date" value="${m.date||""}"></td>
        <td><input data-f="city" value="${m.city||""}" style="width:140px"></td>
        <td><input data-f="place" value="${m.place||""}" style="width:180px"></td>
        <td class="row">
          <input data-f="timeFrom" type="time" value="${m.timeFrom||""}">
          <span>—</span>
          <input data-f="timeTo" type="time" value="${m.timeTo||""}">
        </td>
        <td>
          <select data-f="status">
            <option value="ok" ${m.status!=='annule'?'selected':''}>Présent</option>
            <option value="annule" ${m.status==='annule'?'selected':''}>Annulé</option>
          </select>
        </td>
        <td class="row">
          <button class="btn small" onclick="saveMarket('${m.id}')">Enregistrer</button>
          <button class="btn small" onclick="deleteMarket('${m.id}')">Supprimer</button>
        </td>
      </tr>
    `);
  });
});

window.saveMarket = async (id)=>{
  const row = document.getElementById(`m-${id}`);
  const get = sel => row.querySelector(`[data-f="${sel}"]`).value;
  await updateDoc(doc(db,"markets",id),{
    date:get('date'), city:get('city'), place:get('place'),
    timeFrom:get('timeFrom'), timeTo:get('timeTo'),
    status:get('status')
  });
  alert("Marché mis à jour.");
};

window.deleteMarket = async (id)=>{
  if(confirm("Supprimer cette date de marché ?")){
    await deleteDoc(doc(db,"markets",id));
  }
};

/* =============== AVIS (modération simple) =============== */
const reviewsPending = document.getElementById('reviewsPending');
// (affiche seulement ceux où approved === false si tu en ajoutes depuis le site public)
onSnapshot(collection(db,"reviews"), (snap)=>{
  reviewsPending.innerHTML = "";
  snap.forEach(d=>{
    const r = { id:d.id, ...d.data() };
    if(r.approved === false){
      reviewsPending.insertAdjacentHTML('beforeend', `
        <div class="cardA">
          <b>${r.productName||r.productId}</b> — ${"★".repeat(r.stars||0)}${"☆".repeat(5-(r.stars||0))}
          <p>${r.text||""}</p>
          <small>par ${r.author||"Anonyme"}</small><br>
          <div class="row" style="margin-top:6px">
            <button class="btn small" onclick="approveReview('${r.id}')">Approuver</button>
            <button class="btn small" onclick="removeReview('${r.id}')">Supprimer</button>
          </div>
        </div>
      `);
    }
  });
});
window.approveReview = async (id)=>{ await updateDoc(doc(db,"reviews",id), { approved:true }); };
window.removeReview  = async (id)=>{ if(confirm("Supprimer l’avis ?")) await deleteDoc(doc(db,"reviews",id)); };
